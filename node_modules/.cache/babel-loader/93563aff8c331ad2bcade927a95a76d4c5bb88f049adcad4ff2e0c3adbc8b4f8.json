{"ast":null,"code":"var _jsxFileName = \"/Users/sumit/Desktop/NETFLIX_CLONE/src/components/Row.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport axios from '../api/tmdb';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RowContainer = styled.div`\n  margin-left: 20px;\n  color: white;\n  margin-bottom: 20px;\n`;\n_c = RowContainer;\nconst Title = styled.h2`\n  margin-bottom: 10px;\n`;\n_c2 = Title;\nconst RowPosters = styled.div`\n  display: flex;\n  overflow-y: hidden;\n  overflow-x: scroll;\n  padding: 20px 0;\n  scroll-behavior: smooth;\n  \n  &::-webkit-scrollbar {\n    display: none;\n  }\n  -ms-overflow-style: none;\n  scrollbar-width: none;\n`;\n_c3 = RowPosters;\nconst RowPoster = styled.img`\n  object-fit: contain;\n  width: ${props => props.isLargeRow ? \"160px\" : \"240px\"};\n  max-height: ${props => props.isLargeRow ? \"250px\" : \"150px\"};\n  margin-right: 10px;\n  transition: transform 450ms;\n  border-radius: 4px;\n  \n  &:hover {\n    transform: scale(1.08);\n    cursor: pointer;\n  }\n`;\n_c4 = RowPoster;\nfunction Row({\n  title,\n  fetchUrl,\n  isLargeRow\n}) {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const base_url = \"https://image.tmdb.org/t/p/original\";\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const response = await axios.get(fetchUrl);\n        if (response.data.results) {\n          const filteredMovies = response.data.results.filter(movie => movie.poster_path && movie.backdrop_path);\n          setMovies(filteredMovies);\n        }\n      } catch (error) {\n        console.error(\"Error fetching row data:\", error);\n      }\n    }\n    fetchData();\n  }, [fetchUrl]);\n  if (!movies.length) return null;\n  return /*#__PURE__*/_jsxDEV(RowContainer, {\n    children: [/*#__PURE__*/_jsxDEV(Title, {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RowPosters, {\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(RowPoster, {\n        isLargeRow: isLargeRow,\n        src: `${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.title || movie.name,\n        loading: \"lazy\"\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n_s(Row, \"MO6b3PSP3RIUqZ8gtSrBZBVtBbs=\");\n_c5 = Row;\nexport default Row;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"RowContainer\");\n$RefreshReg$(_c2, \"Title\");\n$RefreshReg$(_c3, \"RowPosters\");\n$RefreshReg$(_c4, \"RowPoster\");\n$RefreshReg$(_c5, \"Row\");","map":{"version":3,"names":["React","useState","useEffect","styled","axios","jsxDEV","_jsxDEV","RowContainer","div","_c","Title","h2","_c2","RowPosters","_c3","RowPoster","img","props","isLargeRow","_c4","Row","title","fetchUrl","_s","movies","setMovies","base_url","fetchData","response","get","data","results","filteredMovies","filter","movie","poster_path","backdrop_path","error","console","length","children","fileName","_jsxFileName","lineNumber","columnNumber","map","src","alt","name","loading","id","_c5","$RefreshReg$"],"sources":["/Users/sumit/Desktop/NETFLIX_CLONE/src/components/Row.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport axios from '../api/tmdb';\n\nconst RowContainer = styled.div`\n  margin-left: 20px;\n  color: white;\n  margin-bottom: 20px;\n`;\n\nconst Title = styled.h2`\n  margin-bottom: 10px;\n`;\n\nconst RowPosters = styled.div`\n  display: flex;\n  overflow-y: hidden;\n  overflow-x: scroll;\n  padding: 20px 0;\n  scroll-behavior: smooth;\n  \n  &::-webkit-scrollbar {\n    display: none;\n  }\n  -ms-overflow-style: none;\n  scrollbar-width: none;\n`;\n\nconst RowPoster = styled.img`\n  object-fit: contain;\n  width: ${props => props.isLargeRow ? \"160px\" : \"240px\"};\n  max-height: ${props => props.isLargeRow ? \"250px\" : \"150px\"};\n  margin-right: 10px;\n  transition: transform 450ms;\n  border-radius: 4px;\n  \n  &:hover {\n    transform: scale(1.08);\n    cursor: pointer;\n  }\n`;\n\nfunction Row({ title, fetchUrl, isLargeRow }) {\n  const [movies, setMovies] = useState([]);\n  const base_url = \"https://image.tmdb.org/t/p/original\";\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const response = await axios.get(fetchUrl);\n        if (response.data.results) {\n          const filteredMovies = response.data.results.filter(\n            movie => movie.poster_path && movie.backdrop_path\n          );\n          setMovies(filteredMovies);\n        }\n      } catch (error) {\n        console.error(\"Error fetching row data:\", error);\n      }\n    }\n    fetchData();\n  }, [fetchUrl]);\n\n  if (!movies.length) return null;\n\n  return (\n    <RowContainer>\n      <Title>{title}</Title>\n      <RowPosters>\n        {movies.map(movie => (\n          <RowPoster\n            key={movie.id}\n            isLargeRow={isLargeRow}\n            src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`}\n            alt={movie.title || movie.name}\n            loading=\"lazy\"\n          />\n        ))}\n      </RowPosters>\n    </RowContainer>\n  );\n}\n\nexport default Row; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}